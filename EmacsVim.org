* Vim
** text editing notes
*** quick insert

o: insert line below
Shift+o: insert line above
*** quick delete
daw: delete word under cursor
caw: same effect + insert mode

*** undo & redo
u & Ctrl+r
*** change word 
cw
c$  : note that the "c" command would switch to insert mode
*** change errors
     To substitute new for the first old on a line type  :s/old/new
     To substitute new for all 'old's on a line type     :s/old/new/g
     To substitute phrases between two line #'s type     :#,#s/old/new/g
     To substitute all occurrences in the file type      :%s/old/new/g
     To ask for confirmation each time add 'c'           :%s/old/new/gc
*** external command
:!
      Some useful examples are:
          :!ls  or  :!dir                 -  shows a directory listing.
          :!rm  or  :!del FILENAME        -  removes file FILENAME.
*** selective write 
           ** To save part of the file, type  :#,# w FILENAME  **

  1. Once again, type  :!ls  or  :!dir  to obtain a listing of your directory
     and choose a suitable filename such as TEST.

  2. Move the cursor to the top of this lesson by pressing  *C-k*  to find the
     number of that line.  REMEMBER THIS NUMBER!

  3. Now move to the bottom of the lesson by pressing  *C-j*  to find the
     number of that line. REMEMBER THIS LINE NUMBER ALSO!

  4. To save ONLY a section to a file, type   :#,# w TEST   where #,# are
     the two numbers you remembered (top,bottom) and TEST is your filename.

  5. Again, see that the file is there with  :!ls  or  :!dir  but DO NOT
     remove it.

*** retrieve and merge file
:r FILENAME

** vim text objects(like words, sentences, paragraphs & user-defined objects)
In Vim, editing commands have the following structure:
  <number><command><text object or motion>

some text objects eg.: aw, iw, as, is, ap, ip
command eg.: daw, ciw

Vim provides several text objects based on common *programming language constructs*.

Strings
a” – a double quoted string
i” – inner double quoted string
a’ – a single quoted string
i’ – inner single quoted string
a` – a back quoted string
i` – inner back quoted string

command eg.: ci", ci'

Parentheses
a) – a parenthesized block
i) – inner parenthesized block

Brackets
a] – a bracketed block
i] – inner bracketed block

Braces
a} – a brace block
i} – inner brace block

Markup Language Tags
at – a tag block
it – inner tag block
a> – a single tag
i> – inner single tag

*** Vi Command Line Editing

If you use Vi command line editing in your shell, enabled with set -o vi in bash
and bindkey -v in zsh, Vim’s text objects are not available. Text objects were
introduced by Vim but shell command line editing is based on Vi.

*** Precision Editing

Vim’s text objects provide an incredible level of precision. The key is to try
to always edit by text objects. Editing by motions e.g., by part of a line, to
the next occurrence of a character, is tedious, clumsy, and slow. Instead of
correcting a misspelling character by character, change the entire word and
re-type it.

Don’t be discouraged by the large number of text objects, their conventions make
them intuitive and easy to learn. After some practice, like every other Vim
command, they’ll quickly become just another muscle memory.

*** vim script can be used to define new text objects 
like in [[https://github.com/vim-scripts/argtextobj.vim][VimTextObj]], it provides a text object for function arguments.  
aa – an argument
ia – inner argument

** speak vim - verbs, nouns, and modifiers
Using vim is like talking to your editor in ‘verb modifier object’ sentences, turned into acronyms

learn some verbs: v (visual), c (change), d (delete), y (yank/copy). these are the most important. there are others
learn some modifiers: i (inside), a (around), t (till..finds a character), f (find..like till except including the char), / (search..find a string/regex)
learn some text objects: w (word), s (sentence) p (paragraph) b (block/parentheses), t (tag, works for html/xml) there are others

To move efficiently in vim, don’t try to do anything by pressing keys many times, instead speak to the editor in sentences

delete the current word: diw (delete inside word)
change current sentence: cis (change inside sentence)
change a string inside quotes: ci” (change inside quote)
change until next occurrence of ‘foo’: c/foo (change search foo)
change everything from here to the letter X: ctX
visually select this paragraph: vap (visual around paragraph)


If you understand the verbs and objects you’re dealing with, you will soon
realize that adding a new plugin and learning a new verb or noun exponentially
increases your productivity, as you can now apply it in all the sentences you
already know. It’s just like learning a language.

* Emacs
** org mode
*** tables
| feature    | vim          | emacs     | comparison                     |
|------------+--------------+-----------+--------------------------------|
| navigation | extrordinary | very good | emacs+evil can approximate vim |
|            |              |           |                                |
*** fonts and notations

*bold*
/incline/
_underline_
*** org capture
*** embed and run code in org mode
use *<s* to create a source code block snippet
use *C-c C-c* to execute the code block

#+BEGIN_SRC python :results output
a = 1+1
print a
#+END_SRC

#+RESULTS:
: 2


#+BEGIN_SRC R
a = 1
b = 1
print((a+b))
#+END_SRC

#+RESULTS:
: 2


** helm 
*** TODO pratice navigation via helm in emacs regularly 
** magit
* Spacemacs
** commands
*** shorthand
- S - spelling
- T - themes
- a - applications
- b - buffers
- f - files
- g - git/version control
- w - manage windows
- h - help
* Analogy & Comparison
** Quotes
*** Mastering Emacs
1) What makes /LISP/ such a fantastic language is that source code and data structures are 
intrinsically one and the same: the /LISP/ source code you read as a human is almost identical 
to how the code is manipulated as a data structure by /LISP/ ----- the distinction between the 
questions "What is data?" and "What is code?" is nil.

* Voc & Terminology 
tinkerer: a person who enjoys fixing and experimenting with machines and their parts
esoteric: confined to and understandable by only an enlightened inner circle

* Questions 
** TODO how to search a keyword in a batch of files inside emacs? 
** TODO "It’s best to use search commands for searching and not editing". why?
* Problems/Projects for Pratising

** DONE study how to enter Chinese in Emacs across possible platform(Windows, Mac and Linux)
CLOSED: [2016-01-11 Mon 00:47] SCHEDULED: <2015-11-25 Wed>
Also need to figure out what *encoding* format to use. Unicode-8 or Unicode-16
or else?  

If I figure out this, then from 2016, I'll keep my daily notes in Emacs instead of Lyx.
