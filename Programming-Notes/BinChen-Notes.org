#+OPTIONS: ^:{}
* Practical guide to use Gnus with Gmail                                        :emacs:gnus:email:gmail:
  :PROPERTIES:
  :ID:       o2b:C45FB98A-3872-4877-9E50-5BBAFAE0561C
  :POST_DATE: 2012-10-12 17:14:00
  :POST_SLUG: notes-on-using-gnus
  :POSTID:   403
  :UPDATE_DATE: 2014-08-09 06:18:51
  :END:
Author: Chen Bin (redguardtoo)

Version: 20160203

Updated: <2016-02-03 Wed>

Created: <2012-10-12 Mon>

Copyright: This work is licensed under the [[http://creativecommons.org/licenses/by-nc-nd/3.0/][Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License]].

** Introduction
Gnus is a nice email client.

But many newbies get lost in its features. It would be much easier if they learned the *essential 5% features* and ignore the remaining 95% at the beginning.

So here is my guide on the 5%.

** Why (OPTIONAL)
- Gnus is *solid*
- Works on all platforms
- Less hardware resource required
- Mail search and filter is great
- Bundled with Emacs, no extra installation needed
- Usable when offline. Check the "offline" part in the section "Advanced tips"
- powerful combined with other plugins like [[https://github.com/capitaomorte/yasnippet][yasnippet]]

** Quick start
*** Requirements and conventions
A little homework is needed before we start,
- This guide applies on Emacs24+
- You need install GnuTLS and OpenSSH on Linux/Mac/Window(Cygwin)
- =C= means =Ctrl= and =M= means =Alt=. For example, =M-x= means pressing =Alt= and =x= together.
- =M-x mycommand= means pressing =Alt= and =x=, input "mycommand", and press =Enter= key.
- =RET= means =Enter= key.
- "Group" means "mail folder".
- "Group buffer" means the list of folders.
- "Summary buffer" means the list of mails.

*** Sample setup
Now please check [[http://www.emacswiki.org/emacs/GnusGmail]] for basics. You can also use my settings at the end of this article.

*** Usage
After setup, =M-x gnus= in Emacs.

You will come to the "Group Buffer" window. The "Group Buffer" lists the mail folders. In Gnus, the folder is called "Group". By default, the folders are *invisible*!

Please subscribe the groups to make it visible. For example, INBOX is named "nnimap+gmail:INBOX" in "Group Buffer" and *it's invisible at the beginning*!. I admit it's confusing.

Check section "Subscribe groups" for details.

At minimum, you need subcribe INBOX group. But after subscribing the INBOX is still *invisible* if INBOX contains NO unread mails. Yes, I agree with you this makes no sense for a modern email client!

You can =C-u 5 M-x gnus-group-list-all-groups= to solve this problem.

You can insert below code into ~/.emacs to create hotkey =o= for =C-u 5 M-x gnus-group-list-all-groups= :
#+BEGIN_SRC emacs-lisp
(defun my-gnus-group-list-subscribed-groups ()
  "List all subscribed groups with or without un-read messages"
  (interactive)
  (gnus-group-list-all-groups 5))

(define-key gnus-group-mode-map
  ;; list all the subscribed groups even they contain zero un-read messages
  (kbd "o") 'my-gnus-group-list-subscribed-groups)
#+END_SRC

In the "Group Buffer", you can enter a folder by pressing =RET=. But I strongly suggest =C-u RET= because you intend to see all the mails instead of unread mails.

In the folder, you are viewing "Summary Buffer" which is, as I said before, the list of your mails.

Now it's simple. Press =RET= to see the mail. Press =q= to quit "Summary Buffer".

In short, "Group Buffer" lists mail folders. "Summary Buffer" lists mails in one folder.

That's all you need to know. You could go to section [[My Gnus configuration (for Gmail)]] to use Gnus now without reading remaining sections.
** Essential 5%
Don't memorize all the key bindings. Only pick up what you actually use.

At the end of this article, I provide *my [[https://github.com/abo-abo/hydra][Hydra]] setup to help you avoid remembering key bindings *.

Please check section "Use Hydra to avoid remembering key bindings".
*** Search mails
**** Search mails on Server
Press =G G= or =M-x gnus-group-make-nnir-group= to search mails at *server side* in "Group Buffer".

You can press =#= to mark the groups.  Search will be limited to marked groups. =M-#= to unmark.

If no group marked, the group under cursor is searched.

Place the cursor before the first group, all groups will be searched.

To search certain fields in the mail, press =C-u G G= or =C-u M-x gnus-group-make-nnir-group= instead. This is a very useful technique.

You can apply [[http://tools.ietf.org/html/rfc3501#section-6.4.4][more advanced search syntax]] by:
- Press =C-u G G= or =C-u M-x gnus-group-make-nnir-group=
- Input query statements, press Enter
- Type "imap", press Enter

**** Filter mails locally
Press =/ /= to limit the mails by subject at "Summary Buffer". "Limiting" means *filtering mails locally*.

Press =/ a= to limit the mails by author at "Summary Buffer".

=/ w= to cancel the current filter.

You can apply the limits sequentially and cancel them in reverse order by pressing =/ w=.

"Limiting" is cool. [[http://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Limiting]] has more tricks.

See [[http://sachachua.com/blog/2008/05/emacs-gnus-searching-mail/]] for technical details.

*** Subscribe groups
Press =A A= or =M-x gnus-group-list-active= in "Group Buffer" to fetch groups list on *all connected server*. It take a while. I suggest pressing "L" to use local cache instead after =A A= once.

After =A A= or =L=, press =u= to subscribe/unsubscribe specific group.

In order to see all the mails in "INBOX" folder/group, you need *MANUALLY* subscribe the group "INBOX"!

Pressing =o= is *much better*. It is the hotkey I created for =C-u 5 M-x gnus-group-list-all-groups=, as mentioned in previous sections.

Press =g= or =M-x gnus-group-get-new-news= to refresh groups list.

You can also subscribe programmatically in ~/.gnus.el:
#+begin_src elisp
(gnus-subscribe-hierarchically "nnimap+hotmail:Inbox")
#+end_src
*** Reply email
Press =R= or =M-x gnus-summary-reply-with-original= to reply with quoted text. Press =r= or =M-x gnus-summary-reply= to reply without quoted text.

Press =S W= (captalized S then captalized W) or =M-x gnus-summary-wide-reply-with-original=to reply all with quoted text. It's called "wide reply" in Emacs.

Press =S w= or =M-x gnus-summary-wide-reply= to reply all without quoted text.
*** Compose new email
Press =m= or =M-x gnus-new-mail= in "Summary Buffer".

You could also =C-x m= or =M-x componse-mail= anywhere in Emacs without bugging Gnus.
*** Re-send as new mail
Press =S D e= or =M-x gnus-summary-resend-message-edit=. Useful if you re-send mail in Draft folder.
*** Attach a file
Press =C-c C-a= or =M-x mml-attach-file=.

The attached file is actually plain text embedded in mail body. You can copy and modify the text.
*** Save attachment
Move *focus over the attachment* and press =o= or =M-x gnus-mime-save-part=. See "[[http://www.gnu.org/software/emacs/manual/html_node/gnus/Using-MIME.html][Using Mime]]" in Emacs manual for details.
*** Open attachment
Move *focus over the attachment* and press =Enter= or =M-x gnus-article-press-button=.

The flag =[[https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/mailcap.html][mailcap-mime-data]]= controls what program is used to open the attachment.

You can change the flag directly at Window or OSX.

At Linux, use =M-x mailcap-parse-mailcaps= to load data from ~/.mailcap into =mailcap-mime-data=.

My ~/.mailcap:
#+begin_src conf
# url
text/html; w3m -I %{charset} -T text/html; copiousoutput;

# image viewer
image/*; feh -F -d -S filename '%s';

# pdf
application/pdf; zathura '%s';
image/pdf; zathura '%s'

# video
video/* ; mplayer '%s'
audio/* ; mplayer '%s'

# Office files.
application/msword; soffice '%s'
application/rtf; soffice '%s'
text/richtext; soffice '%s'
application/vnd.ms-excel; soffice '%s'
application/vnd.ms-powerpoint; soffice '%s'
#+end_src

*** Send email
Press =C-c C-c= or =M-x message-send-and-exit=.
*** Refresh "Summary Buffer" (check new mails)
hotkey =/ N= or =M-x gnus-summary-insert-new-articles=.
*** Make all mails visible (IMPORTANT)
Press =C-u RET= on the selected group in "Group Buffer", or =C-u M-g= in "Summary Buffer".

That's the *most important part* of this article! By default, Gnus only displays unread mails.

Check [[http://stackoverflow.com/questions/4982831/i-dont-want-to-expire-mail-in-gnus]] for details.
*** Forward mail
Press =C-c C-f= or =M-x gnus-summary-mail-forward= in "Summary Buffer".

You can mark multiple mails to forward (hotkey is "#") and forward them in one mail. [[https://plus.google.com/112423173565156165016/posts][Holger Schauer]] provided the tip.

After the forwarded email is created, you may copy the body of that email without sending it. The copied content could be inserted into new mail.
*** Mark mails as read
Press =c= either in "Summary Buffer" or "Group Buffer". This is *my most frequently used command* because it's easier Gmail's own UI!
*** Tree view of mail folders
[[http://www.gnu.org/software/emacs/manual/html_node/gnus/Group-Topics.html][Group Topics]] is used re-organize the mail folder into tree view.

For example, you can place mail folders from Gmail into "gmail" topic, mails from Outlook.com into "hotmail" topic, place "gmail" and "hotmail" under root topic "Gnus".

The setup is only one line,
#+begin_src elisp
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
#+end_src

Though you can read [[http://www.gnu.org/software/emacs/manual/html_node/gnus/Topic-Commands.html][offical manual]] to learn its command, my way is much better.

Insert below code into ~/.gnus.el and you are done,
#+begin_src elisp
(eval-after-load 'gnus-topic
  '(progn
     (setq gnus-message-archive-group '((format-time-string "sent.%Y")))
     (setq gnus-topic-topology '(("Gnus" visible)
                                 (("misc" visible))
                                 (("hotmail" visible nil nil))
                                 (("gmail" visible nil nil))))

     (setq gnus-topic-alist '(("hotmail" ; the key of topic
                               "nnimap+hotmail:Inbox"
                               "nnimap+hotmail:Drafts"
                               "nnimap+hotmail:Sent")
                              ("gmail" ; the key of topic
                               "INBOX"
                               "[Gmail]/Sent Mail"
                               "Drafts")
                              ("misc" ; the key of topic
                               "nnfolder+archive:sent.2015-12"
                               "nnfolder+archive:sent.2016"
                               "nndraft:drafts")
                              ("Gnus")))))
#+end_src

Instead remembering topic commands, editing about snippet is more straightforward. The only requirement is a little bit of Emacs Lisp knowledge.

The flag =gnus-message-archive-group= defines archive folder of sent mail. By default new folder is created *monthly*. My setup make it created *yearly*.
** Advanced tips
*** Windows?
It's *100% usable* if you install [[https://www.cygwin.com/][Cygwin]] at first.

Gnus from Cygwin version of Emacs works out of the box.

Native [[https://ftp.gnu.org/gnu/emacs/windows/][Emacs for Windows]] need a little setup:
- Right-click "My Computer" and go to "Properties -> Advanced -> Environmental Variables"
- Setup *user variables* which does not require Administrator right
- Set the variable "HOME" to the parent directory of your ".emacs.d" directory
- Set the variable "PATH" to the "C:\cygwin64\bin". I supposed you install cygwin at C driver
- Install GnuTLS and OpenSSH through Cygwin's package manager
*** Outlook?
Exchange/Outlook users could read my post [[http://blog.binchen.org/posts/how-to-get-email-from-exchange-server-without-outlook.html]].

Basically you need one portable java program [[http://davmail.sourceforge.net/][Davmail]]. That's enough in 99% companies. But if your Adminstrator is evil, you need use [[http://ewseditor.codeplex.com/][EWSEditor]] for once.
*** Auto-complete mail address
Install [[http://bbdb.sourceforge.net/][BBDB]]  through [[http://melpa.milkbox.net/#/bbdb][melpa]]. It is a email address database written in Emacs Lisp.

Insert below code into ~/.emacs,
#+BEGIN_SRC emacs-lisp
(add-hook 'message-mode-hook
          '(lambda ()
             (bbdb-initialize 'message)
             (bbdb-initialize 'gnus)
             (local-set-key "<TAB>" 'bbdb-complete-name)))
#+END_SRC

[[https://github.com/company-mode/company-mode][company-mode]] does the similar job which works out of the box.

I use both =M-x bbdb-complete-name= because company-mode is a little picky on BBDB versions.
*** Synchronize from Gmail contacts
Please,
- Go to [[https://www.google.com/contacts/]]
- Click "More -> Export -> vCard Format -> Export".
- Install [[https://github.com/redguardtoo/gmail2bbdb]] (developed by me) and press =M-x gmail2bbdb-import-file=. The contacts will be output into ~/.bbdb which is automatically detected by Emacs

There are alternatives which requires certain version of BBDB. My plugin doesn't have this issue.
*** Customize "From" field
Easiest solution is switch the FROM field dynamically by =M-x toggle-mail-from-field=:
#+begin_src elisp
(defun toggle-mail-from-field ()
  (interactive)
  (cond
   ((string= "personal@gmail.com" user-mail-address)
    (setq user-mail-address "myname@office.com"))
   (t
    (setq user-mail-address "personal@gmail.com")))
  (message "Mail FROM: %s" user-mail-address))
#+end_src

A more complex solution is setup FROM field by the computer you are using:
#+BEGIN_SRC emacs-lisp
;; (getenv "HOSTNAME") won't work because $HOSTNAME is not an env variable
;; (system-name) won't work because my /etc/hosts has some weird setup in office
(setq my-hostname (with-temp-buffer
        (shell-command "hostname" t)
        (goto-char (point-max))
        (delete-char -1)
        (buffer-string)))

(defun at-office ()
  (interactive)
  (and (string= my-hostname "my-sydney-workpc")
       (not (or (string= my-hostname "homepc")
                (string= my-hostname "eee")))))

(setq user-full-name "My Name"
      user-mail-address (if (at-office) "me@mycompany.com" "me@gmail.com"))
#+END_SRC

Please note,
- Command line program =hostname= is better than Emacs function =(system-name)=
- I works on several computers which does *not* belong to me, so I cannot change /etc/hosts which =(system-name)= try to access
- Please [[http://support.google.com/a/bin/answer.py?hl=en&answer=22370][verify]] your email address at Gmail if you use google's SMTP server

*** Classify email
[[http://getpopfile.org/][Popfile]].

You may think [[http://www.google.com/inbox/][Google's Inbox]] equals to Popfile. Trust me, it's not. You only need Popfile!

Popfile is open sourced. The data is stored *locally* with my full control. For example, the algorithm trained by Gmail can be used to classify mails from Microsoft Exchange Mail Server.

Check [[http://blog.binchen.org/posts/use-popfile-at-linux.html]] for details.
*** Write HTML mail
Use [[http://orgmode.org/worg/org-contrib/org-mime.html][org-mime]].

Usage is simple. Write mail in org format and =M-x org-mime-htmlize=.

Please use my patched [[https://github.com/redguardtoo/][org-mime]] which supports Emacs 24.
*** Read HTML mail
Install [[http://w3m.sourceforge.net/][w3m]] and [[http://www.emacswiki.org/emacs/emacs-w3m][emacs-w3m]].

Then insert below code into ~/.emacs,
#+BEGIN_SRC emacs-lisp
(setq mm-text-html-renderer 'w3m)
#+END_SRC
*** Read mail offline
Go to the "Summary Buffer".

You need mark the mails by press =!= or =M-x gnus-summary-tick-article-forward=.

The marked mails enter the disk cache. They can be read offline.

You may remove it from the disk cache by =M-x gnus-summary-put-mark-as-read=.

You also need insert below code into ~/.emacs,
#+BEGIN_SRC emacs-lisp
(setq gnus-use-cache t)
#+END_SRC
Above code set =gnus-use-cache= to true to use the cache to the full extent by "wasting" *tens of megabytes* disk space.

The disk cache is located at "~/News/cache/". You can back it up with Github's private repository.
*** Multiple accounts
You only need copy the code containing "gnus-secondary-select-methods" from my setup.

Here is a sample setup,
#+BEGIN_SRC emacs-lisp
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "gmail-second"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                      ;; press 'E' to expire email
                      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                      (nnmail-expiry-wait 90)))
#+END_SRC

=gnus-secondary-select-methods= is the list of your email accounts.

The information of multiple accounts is stored at ~/.authinfo.gpg.
*** Why Gnus displays more mails than Gmail
Gnus counts by individual mail. Gmail count by mail thread.
*** Subscribe "[Gmail]/Sent Mail" folder
So Gnus can track *all sent mails*.
*** Reconnect mail server
Press =M-x gnus-group-enter-server-mode= to go into server list.

Move the cursor to "offline" server then press =M-x gnus-server-open-server=.
*** Use Hydra to avoid remembering key bindings
- Install [[https://github.com/abo-abo/hydra][Hydra]] through [[http://melpa.org/]]
- Insert below code into ~/.emacs. Then press =C-c C-y= when composing mail. Press =y= in other modes

#+begin_src elisp
(eval-after-load 'gnus-group
  '(progn
     (defhydra hydra-gnus-group (:color blue)
       "Do?"
       ("a" gnus-group-list-active "REMOTE groups A A")
       ("l" gnus-group-list-all-groups "LOCAL groups L")
       ("c" gnus-topic-catchup-articles "Read all c")
       ("G" gnus-group-make-nnir-group "Search server G G")
       ("g" gnus-group-get-new-news "Refresh g")
       ("s" gnus-group-enter-server-mode "Servers")
       ("m" gnus-group-new-mail "Compose m OR C-x m")
       ("#" gnus-topic-mark-topic "mark #")
       ("q" nil "cancel"))
     ;; y is not used by default
     (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))

;; gnus-summary-mode
(eval-after-load 'gnus-sum
  '(progn
     (defhydra hydra-gnus-summary (:color blue)
       "Do?"
       ("n" gnus-summary-insert-new-articles "Refresh / N")
       ("f" gnus-summary-mail-forward "Forward C-c C-f")
       ("!" gnus-summary-tick-article-forward "Mail -> disk !")
       ("p" gnus-summary-put-mark-as-read "Mail <- disk")
       ("c" gnus-summary-catchup-and-exit "Read all c")
       ("e" gnus-summary-resend-message-edit "Resend S D e")
       ("R" gnus-summary-reply-with-original "Reply with original R")
       ("r" gnus-summary-reply "Reply r")
       ("W" gnus-summary-wide-reply-with-original "Reply all with original S W")
       ("w" gnus-summary-wide-reply "Reply all S w")
       ("#" gnus-topic-mark-topic "mark #")
       ("q" nil "cancel"))
     ;; y is not used by default
     (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))

;; gnus-article-mode
(eval-after-load 'gnus-art
  '(progn
     (defhydra hydra-gnus-article (:color blue)
       "Do?"
       ("f" gnus-summary-mail-forward "Forward")
       ("R" gnus-article-reply-with-original "Reply with original R")
       ("r" gnus-article-reply "Reply r")
       ("W" gnus-article-wide-reply-with-original "Reply all with original S W")
       ("o" gnus-mime-save-part "Save attachment at point o")
       ("w" gnus-article-wide-reply "Reply all S w")
       ("q" nil "cancel"))
     ;; y is not used by default
     (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))

(eval-after-load 'message
  '(progn
     (defhydra hydra-message (:color blue)
       "Do?"
       ("ca" mml-attach-file "Attach C-c C-a")
       ("cc" message-send-and-exit "Send C-c C-c")
       ("q" nil "cancel"))
     (global-set-key (kbd "C-c C-y") 'hydra-message/body)))
#+end_src

** My setup
This setup requires Emacs 24.3 at minimum.

Please note the *multiple accounts on the same mail server is troublesome*. Don't waste time on it.

My ~/.gnus.el,
#+BEGIN_SRC emacs-lisp
(require 'nnir)

;; @see http://www.emacswiki.org/emacs/GnusGmail#toc1
(setq gnus-select-method '(nntp "news.gmane.org")) ;; if you read news groups

;; ask encyption password once
(setq epa-file-cache-passphrase-for-symmetric-encryption t)

;; @see http://gnus.org/manual/gnus_397.html
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "gmail"
                      (nnimap-address "imap.gmail.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                      ;; press 'E' to expire email
                      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                      (nnmail-expiry-wait 90)))

;; OPIIONAL, the setup for Microsoft Hotmail
(add-to-list 'gnus-secondary-select-methods
             '(nnimap "hotmail"
                      (nnimap-address "imap-mail.outlook.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      (nnmail-expiry-wait 90)))

(setq gnus-thread-sort-functions
      '((not gnus-thread-sort-by-date)
        (not gnus-thread-sort-by-number)))

; NO 'passive
(setq gnus-use-cache t)

;; BBDB: Address list
(add-to-list 'load-path "/where/you/place/bbdb/")
(require 'bbdb)
(bbdb-initialize 'message 'gnus 'sendmail)
(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
(setq bbdb/mail-auto-create-p t
      bbdb/news-auto-create-p t)

;; auto-complete emacs address using bbdb UI
(add-hook 'message-mode-hook
          '(lambda ()
             (flyspell-mode t)
             (local-set-key "<TAB>" 'bbdb-complete-name)))

;; Fetch only part of the article if we can.
;; I saw this in someone's .gnus
(setq gnus-read-active-file 'some)

;; open attachment
(eval-after-load 'mailcap
  '(progn
     (cond
      ;; on OSX, maybe change mailcap-mime-data?
      ((eq system-type 'darwin))
      ;; on Windows, maybe change mailcap-mime-data?
      ((eq system-type 'windows-nt))
      (t
       ;; Linux, read ~/.mailcap
       (mailcap-parse-mailcaps)))));; Tree view for groups.  I like the organisational feel this has.

(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;; Threads!  I hate reading un-threaded email -- especially mailing
;; lists.  This helps a ton!
(setq gnus-summary-thread-gathering-function 'gnus-gather-threads-by-subject)

;; Also, I prefer to see only the top level message.  If a message has
;; several replies or is part of a thread, only show the first
;; messa  'gnus-thread-ignore-subject' will ignore the subject and
;; look at 'In-Reply-To:' and 'References:' headers.
(setq gnus-thread-hide-subtree t)
(setq gnus-thread-ignore-subject t)

;; Personal Information
(setq user-full-name "My Name"
      user-mail-address "username@gmail.com")

;; Read HTML mail
;; You need install the command line brower 'w3m' and Emacs plugin 'w3m'
(setq mm-text-html-renderer 'w3m)

;; Setup to send email through SMTP
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-local-domain "homepc")
;; http://www.gnu.org/software/emacs/manual/html_node/gnus/_005b9_002e2_005d.html
(setq gnus-use-correct-string-widths nil)

(eval-after-load 'gnus-topic
  '(progn
     (setq gnus-message-archive-group '((format-time-string "sent.%Y")))
     (setq gnus-server-alist '(("archive" nnfolder "archive" (nnfolder-directory "~/Mail/archive")
                                (nnfolder-active-file "~/Mail/archive/active")
                                (nnfolder-get-new-mail nil)
                                (nnfolder-inhibit-expiry t))))

     (setq gnus-topic-topology '(("Gnus" visible)
                                 (("misc" visible))
                                 (("hotmail" visible nil nil))
                                 (("gmail" visible nil nil))))

     (setq gnus-topic-alist '(("hotmail" ; the key of topic
                               "nnimap+hotmail:Inbox"
                               "nnimap+hotmail:Drafts"
                               "nnimap+hotmail:Sent"
                               "nnimap+hotmail:Junk"
                               "nnimap+hotmail:Deleted")
                              ("gmail" ; the key of topic
                               "INBOX"
                               "[Gmail]/Sent Mail"
                               "[Gmail]/Trash"
                               "Sent Messages"
                               "Drafts")
                              ("misc" ; the key of topic
                               "nnfolder+archive:sent.2015-12"
                               "nnfolder+archive:sent.2016"
                               "nnfolder+archive:sent.2017"
                               "nndraft:drafts")
                              ("Gnus")))))
#+END_SRC

Your login and password is stored at "~/.authinfo.gpg" which is read by Gnus. =C-h v auth-sources= for more information.

Multiple mail accounts share one ".authinfo.gpg",
#+BEGIN_SRC conf
machine imap.gmail.com login username@gmail.com password my-secret-password port 993
machine smtp.gmail.com login username@gmail.com password my-secret-password port 587
machine imap-mail.outlook.com login username@hotmail.com password my-secret-password port 993
#+END_SRC

Please note ".authinfo.gpg" is encrypted. Emacs will do the encryption/descryption automatically if file extention is ".gpg". See [[http://emacswiki.org/emacs/EasyPG]] for details.
* Practical Emacs Guide for C++ developers                                      :emacs:en:c:cpp:
  :PROPERTIES:
  :ID:       o2b:d260ed4e-b55b-46b5-9fcd-6d5a6bca36c7
  :END:
#+OPTIONS: toc:nil

Author: Chen Bin <chenbin DOT sh AT gmail DOT com>

Created: <2013-07-06>

** Introduction
This guide focus on practical side. I'm already an expert of IDEs (Visual Studio, Eclipse, IntelliJ, Qt Creator ....) before turning to Emacs. So I will introduce you the features that is equals to the quality of professional IDEs.

** original discussion 
https://plus.google.com/110954683162859211810/posts/ZSc9Dtu7Vpz
** Intellisense (smart code completion)
It's called intellisense in Visual Studio. It means when you insert a object name and dot character, the object's method or member is automatically completed.

Many people say [[http://cedet.sourceforge.net/][Cedet]] is a complete solution. I don't use it because it's too slow and hard to setup.

There are two alternatives, 
- [[https://github.com/auto-complete][auto-complete]]
- [[https://github.com/company-mode/company-mode][company-mode]]

To make auto-complete work in C++ code, you need also install another plugin [[https://github.com/brianjcj/auto-complete-clang][auto-complete-clang]].

company-mode don't need any other plugin. I use company-mode because it's actively maintained.

Both auto-complete and company-mode require [[http://clang.llvm.org/][Clang]] installed if you use Clang as a parser.

Clang is just one of many backend command line tool which can extract useful meta information from C/C++ headers.

[[http://www.gnu.org/software/global/][GNU Global]] is the alternative of Clang which I highly recommended. company-mode support it out of the box. 

Pick up either Clang or GNU Global as backend tool.

Both company-mode and auto-complete can complete lots of *other* things like file name, line, dicitionary. I suggest turning of those features when coding in C++ because too many candidates for code completion will distract you.

Whatever you use as backend parser, it will fail if you over-engineered your code. For example, multiple inheritance plus some C++ template? Don't complain that Emacs sucks in your bloated C++ code. It's your code sucks. Write the simplest code just works.

I recommend two books for anyone whose code Clang or GNU Global cannot handle,
- [[http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670][Code Complete]]
- [[http://www.amazon.com/Writing-Solid-Microsoft-Programming-Series/dp/1556155514][Writing Solid Code]]

** Git
Command line version is good enough for me. I don't use any Emacs plugins.

** code editing
- I use evil-mode, vim key binding, end of story
- complete line in evil-mode is actually very useful
- search and replace in evil-mode is even better than the orginal vim one
- I use evil-nerd-commenter to comment/uncomment code
** code navigation
- for navigation in current file, I use imenu
- for navigation between files, you can use cscope or gtags
- both are good enough for me. I use gtags simply because it's updated more often
- ctags is good for C and simple C++ code. Avoid writing complex C++ code could be a better idea. Then you can use ctags.
** flymake (real time syntax check)
- I found it a huge boost to my productivity
- The headache to write makefile to make flymake work is huge. For example, Manually insert correct include C++ header directories into makefile.
- I suggest use cmake and cpputils-cmake to do this job automatically 
** compile
- compile mode in Emacs. All the handy hot keys to locate the next previous compile error.
- you can change variable compile-command from "make" to "make -C /whatever/directory/you/want" in elisp.
- hide the compiling message window in elisp when compiling succeeds.
** debug
- I use M-x gud-gdb which works on gdb 6.3. On OSX 10.7.3, gdb 6.3 is the installed by default.
- Set hot key for gud-run
- Or only use the cli gdb plus some tile window manager like i3. Because for real world debugging, the actual thing you need do is watch the variable, read the context of the code.
- Gud and dired could be programmically changed, so you can jump to the directory of executable easily
** documentation
- The only meaningful documentation these days for me is to search google, search stackoverflow. So I need trigger firefox from Emacs.
** clipboard
- It's useful when you copy/paste code from firefox
- I found the only reliable way is use cli tool for cross-platform development. xclip is not as reliable as xsel.
** file
- jump to the corresponding header. You know "M-x ff-find-other-file"? In real projects, you need give set up 3rd party C++ directories for search. cpputils-cmake can help you. But of course you can do it manually.
- ido is good
- helm plugins are fine. But "M-x helm-ls-git-ls" is very useful if you use git.
- sometime I just use "M-x rgrep"
- Os grep plus percol by mooz plus some handy clipboard bash function plus ":e" in evil-mode is very useful to search and open file quickly
- I don't understand why everything should be done in Emacs, Some handy shell tools plus Emacs is much more powerful.
** window 
- I usually open 4~8 sub-windows
- Use window-numbering.el, the hotkeys are "M-NUM".
- I use evil-mode, so no need to input numeric argument
- I am also using other window navigation plugins, but they are rarely used.
- winner-mode, undo the windows layout
** command
- I use smex to input commands because I cannot remember hot keys because hot keys are different in different modes.
** code template
- yasnippet
- My tip is to assign a unique hot key for yas/expand. So you can use single character as the key of your most frequently used snippet. "a" for assert "l" for log and "i" for include. Other snippets are rarely used actually.
* Master Emacs in one year                                                      :emacs:en:
#+OPTIONS: toc:nil
  :PROPERTIES:
  :ID:       o2b:24796fba-6de7-4712-b83e-b86969c31335
  :POST_DATE: [2012-01-31 Tue 15:08]
  :POSTID:   268
  :ARCHIVE_TIME: 2012-12-26 Wed 19:21
  :ARCHIVE_FILE: ~/projs/mastering-emacs-in-one-year-guide/guide-zh.org
  :ARCHIVE_CATEGORY: emacs
  :END:
Author: Chen Bin (redguardtoo)

Version: 20150424

Updated: <2015-04-24 Fri>

Created: [2012-01-31 Tue 15:08]

Copyright: This work is licensed under the [[http://creativecommons.org/licenses/by-nc-nd/3.0/][Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License]].

** Introduction
I was a Microsoft fan because I was born in China. There was no Unix culture when I was young. My professor knew as much as I knew about Unix. Zero knowledge. Nothing. I believed Microsoft Windows was the only platform worth developing software on. I believed Visual Studio was the best IDE in the world. I was so loyal to Microsoft that I used Visual Studio to edit the code running on Linux server during my first job.

Besides, computers scared me to death. I'm ashamed to admit now that when I graduated from university I didn't know clipboard. If I need input duplicated texts, I typed them character by character. I chose an IT career simply for money. There was no other career path for talented young people in China then.

So,
- This guide is about using Emacs as a professional's tool. I will not show off Emacs as a geek's toy because I am far from geek stereotype. I will focus on philosophy and methodology only. No technical details involved.
- If a computer dummy can [[https://github.com/redguardtoo][be good at Emacs in one year]], you can do better.

Here is the structure of the article:
- Why Emacs matters? You can skip this part if you are familiar with Linux/Unix
- The key point of guide is take full advantage of Master's work. Don't re-invent the wheel
- The steps to master Emacs
- How to improve after grasping basics by learning from community and books
- What matters is people
- FAQ and Summary
** Why Emacs (OPTIONAL)
I intend to keep this section short because my focus is HOW instead of WHY.
*** Emacs master is good at other editors naturally
Master has already known the best, so she/he has higher expectation.

For example, the master expects:
- a good editor should have a package manager bundled. She/He is surprised that [[https://sublime.wbond.net/installation][package manager is NOT bundled in some editor]].
- Broken package could be [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][fixed]] without touching the package's original code.
- When remote repository is down, she/he can [[https://github.com/redguardtoo/myelpa][create a repository]] in the memory stick [[https://github.com/redguardtoo/elpa-mirror][in one minute]].

In summary, she/he knows more than Emacs' competitors can implement.
*** Community is strong
Emacs uses [[http://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][Lisp]]. Its [[http://en.wikipedia.org/wiki/Lisp_%28programming_language%29][compact and "unusual" syntax]] scares off the weak minds.
*** It's powerful
IDE is optimized for one framework. [[http://www.youtube.com/watch?v=EQAd41VAXWo][Emacs can do everything in great way]].
*** It lives forever
Emacs is maintained by a [[http://www.gnu.org/][non-profit organization]]. Competitors die while Emacs stays [[http://en.wikipedia.org/wiki/Emacs#History][during 40 years]].
*** No overhead
The installer is a [[http://ftp.gnu.org/gnu/emacs/windows/][50M bytes zip file]]. The program is portable.
*** What matters is attitude
If I could only give one piece of advice, it would be *being open minded*. 

Newbies may be surprised by following facts:
- I don't know 80% "newbie-must-know" key bindings because [[http://www.emacswiki.org/emacs/Smex][I don't need to]]
- [[https://github.com/purcell/emacs.d/issues?q=author%3Aredguardtoo+][I don't start from my own simple setup at the beginning]]
- I actually [[https://github.com/punchagan/org2blog/issues/153][don't fully understand Lisp "if" statement]] after I've already developed [[https://github.com/redguardtoo][useful Emacs plugins]] and written [[https://news.ycombinator.com/item?id=6909463][hardcore Emacs articles]].
- I use my spare time in one year to master Emacs

** Step by Step Guide
Some conventions: 
- "C" means "Ctrl" and "M" means "Alt"
- "M-x my-command" means press "Alt" and "x" together, enter "my-command"
*** Quick start for greenhorns of Linux/Unix (OPTIONAL) 
Here are the steps:
- Install Emacs 24
- Don't install any plugins
- Learn basic knowledge about [[http://en.wikipedia.org/wiki/Environment_variable][environment variable]] and [[http://en.wikipedia.org/wiki/Redirection_%28computing%29][pipe]]
- Read the official tutorial
- Use [[http://www.emacswiki.org/emacs/OrgMode][org-mode]]
- The only hotkey you need learn in org-mode is TAB key

Use Emacs in this way for several days in order to understand:
- Why people love Emacs
- How Emacs interact with other programs
*** Read the official tutorial
Steps to read tutorial
- Start Emacs with minimum setup. I suggest running command "emacs -nw -Q" in shell
- "M-x help-with-tutorial"

This tutorial takes half an hour. Not too much time for a life time skill.

Please do not skip it.

At minimum, you need learn help commands:
- "M-x describe-variable", hotkey "C-h v", display documentation of variable
- "M-x describe-function", hotkey "C-h f", display documentation of function
- "M-x describe-key", hotkey "C-h k", display documentation of function invoke by key
*** Start from practical problem
Most newbies need a notes taking tool. So [[http://orgmode.org/][Org-mode]] is the answer.

If you don't start by solving real world problem you will lose interest soon. Many people started the journey by learning Lisp. They gave up in the midway.
*** Set the priorities
Focus on your most critical issue only. Ignore other issues temporarily. Sometimes compromise is a better strategy.

For example, I always use Emacs in terminal because at the beginning my most urgent problem is to edit the file on the remote server.

After a happy year with Emacs, I'm curious why other people keep complaining that their Emacs issues, especially on OSX (font not rendered properly, window not maxmized, cannot increase font size, etc). It turns out they are using GUI version while I'm using terminal version. My terminal application already take over and solve these issues perfectly.
*** On the shoulders of giants
This is *the most important section*!

I learned the lesson the hard way. At the beginning, I regarded Emacs as a toy. I digged around the internet for cool code I can copy.

That's totally a waste of time if my goal is to become an Emacs master!

I should have used [[https://github.com/purcell/emacs.d][Steve Purcell's]] setup at the beginning!

Please don't repeat my mistake. Just follow Steven Purcell!

Let me be blunt. You are a newbie, you'd better study top geek's code. Don't try to be "creative" at this stage. You won't *create anything* when re-inventing the wheel.

For example, some readers tell me that Emacs has too many hotkeys. They can't memorize all of them. This is typical in newbies who assume that top geeks can remember more key bindings.

Wrong!

If you have studied any master's setup, you will find that she uses [[http://www.emacswiki.org/emacs/Smex][Smex]], as it is more efficient than pressing hotkeys.

Since Steve Purcell loves new technologies and update his setup frequently, it may be a little harder to follow him for beginners.

That's actually great. I'm lucky to stick to his setup because pulling from his git branch gets me updated with the latest cool things in community.

When I say "on the shoulders of giants", I'm stressing that you need set your standard higher. I'm NOT saying the master's setup is "newbie friendly". If it happens to be "friendly", it's just the *coincidence*.

This section is discussing *the best way to be good, not the easiest way*.

There is a difference between best and easiest. For example, a setup using Vim key bindings is NOT easy but definitely best.

If you are still not convinced, consider my reasons:
- Those giants are more intelligent than me. They are harder working than me. How can I reach their level as quickly as possible?
- The obvious way is to join them.
- If you can report a bug about the master's setup, at least in that moment, you have proven you are better at a certain issue than the master.
- You will get guidance from the master when he/she analyzes your bug report.

*** Report bugs
That's only way to become the padawan of the master.

For example, I learned [[phttp://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][some advanced Lisp skill]] by [[https://github.com/capitaomorte/yasnippet/issues/256][reporting a bug]]. The bonus is that bug report is actually a case study. Knowledge from such a case study is hard to forget.

*** Better yourself everyday
I was inspired by [[https://sites.google.com/site/steveyegge2/tour-de-babel][Steve Yegges' article]]. Here is the text quoted:
#+BEGIN_EXAMPLE
Go look over Paul Nordstrom's shoulder while he works sometime, if you don't believe me. It's a real eye-opener for someone who's used Visual Blub .NET-like IDEs their whole career.
#+END_EXAMPLE

After reading the text, I decided to be as good as Paul Nordstrom. It's mission impossible considering [[http://www.linkedin.com/in/paulnpcom][who Paul Nordstrom is]]. The reason to set a goal I can never reach is to make me not to stop. Whatever minor task I take, I always ask myself how Paul Nordstrom will handle it. Is my operation efficient enough that Steve Yegge will be surprised?

For example, switch focus between sub-windows in Emacs is not efficient by default. I need press "Ctrl-x O" several times to jump to a sub-window. After some investigation, I found [[https://github.com/dimitri/switch-window][switch-window]]. Press "Ctrl-x O" plus number key to finish the operation. I kept searching and found [[https://github.com/nschum/window-numbering.el][window-numbering]]. ALT key plus number key is enough. That's 60% productivity improvement. Alt key is still a little bit far away from my fingers. Another improvement is to use [[https://gitorious.org/evil/pages/Home][Evil-mode]] and [[https://github.com/cofi/evil-leader][evil-leader]], I need only [[https://github.com/redguardtoo/emacs.d/blob/master/init-evil.el][press comma key and number key to switch window]].
*** Join the community
I suggest focusing on Emacs only in order to take full advantage of communities.

For example, although Quora.com has lots of interesting stuff, *do not* read/subscribe/follow them unless it's related to Emacs.
**** Google+
[[https://plus.google.com/communities/114815898697665598016][Emacs community on Google+]] is the best. The average quality of discussion on Google+ is better.

BTW, the Emacs geek [[https://plus.google.com/113859563190964307534][Xah Lee]] hosts a Q/A session at Google Plus every Tuesday. His web site is [[http://xahlee.org/]].
**** Reddit
[[http://www.reddit.com/r/emacs/][Reddit]] is as good as Google+. The advantage of Reddit is that it's seldomly blocked by the corporate firewall.
**** Github
It's a social network for developers.

You can search [[https://github.com/languages/Emacs%20Lisp]] for latest Emacs Lisp code.

If you agrees with my "follow master" strategy, you may like following tip.

I *avoid the pain of maintaining* by watching other masters' emacs.d repositories. I get notified by the bugs and *fix* automatically. All I need to do is clicking "Watch" button on the right top of Github page.
**** Blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the best collection of Emacs related blogs.
**** Quora.com
Follow the question on specific topic instead general one. For example, "What's the best Emacs addon" is more useful than "How to learn Emacs".

Everybody can say something about a general question. But to answer a specific question, you need *first-hand experience*.

Even if you are only interestd in general questions, starting from more practical question is still better. Find the people who provides the best and the shortest answer and follow her.
**** Twitter
I use keyword "emacs :en" to search latest news. The reason to search English only twitter is that there are lots of Japanese post and I don't know Japanese.
**** StackOverflow
Insert "emacs-related-keywords site:stackoverflow.com" in Google search engine.

The quality on stackoverflow discussion is good but there are not many new questions there.

[[http://emacs.stackexchange.com]] is a Q&A site dedicated to Emacs.
**** Youtube
Some videos are great.

For example, [[http://www.youtube.com/watch?feature=player_embedded&v=oJTwQvgfgMM][Emacs Org-mode - a system for note-taking and project planning]] is the best tutorial on org-mode. Carsten proved that org-mode is simple. The only thing to remember is pressing "TAB" key to expand a text node. That's the killer feature of org-mode. Other stuff are bonus.

Youtube lists the best matched results at the top. So you will always see the same things. I suggest sorting the results by upload date.
** Readings
*** EmacsWiki
[[http://www.emacswiki.org/emacs/][EmacsWiki]] has all the tips you need for tweaking the Emacs. It's actively maintained by the community.

People complains that it's not properly organized so it's hard to find the valuable information.

Actually, *most documents* on EmacsWiki is still far better than any other resources. Please be patient and read *the full content* at specific page.
*** Emacs Lisp book
I recommend [[http://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611][Writing GNU Emacs Extensions]] by Bob Glickstein. I like his writing style and the way he organizes chapters.

Xah Lee's [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Emacs Lisp tutorial]] is practical and easy to read.

Steve Yegge's [[http://steve-yegge.blogspot.com.au/2008/01/emergency-elisp.html][Emergency Elisp]] is short but it includes the necessary information for writing Emacs Lisp.

Don't study the Lisp at the beginning until you are confident about your Emacs mastery.
** Knowledge management 
*** Place your setup at Github, *publicly*
I uploaded my setup onto [[https://github.com/redguardtoo/emacs.d]].

Github is the most efficient way of knowledge management because you will never lose the setup.

Github is also a wonderful tool for sharing. I benefit a lot by sharing. People who use my setup are actually helping me perfect my setup. I am the first guy who benefits from a better setup.

For example, people reported that I mixed my personal stuff (email address, full path of my hobby project) into my setup which they need remove. They expected it usable out of the box.

So I re-organized it and placed private stuff into a independent file named "privacy.el". That file is outside of my Emacs configuration. Then it occurred to me that in corporate environment it was not safe to store plain privacy.el on a shared computer without encryption. After some research, I found Emacs already provided [[http://www.emacswiki.org/emacs/EasyPG][a perfect solution]] since version 23.

In order to get the most benefit of sharing, you need make sure your setup is *qualified to share publicly*. Never mix your personal things into it.
*** Dropbox
I use [[https://www.dropbox.com][Dropbox]] to back up documents. Since dropbox will synchronize the documents into the mobile devices, I can study Emacs when commuting.
** My favorite Emacs addons
They are not must-have addons. There are many other alternatives which are as good as the listed.

New users have two problems on plugins:
1. use plugins out of maintenance
2. use not-the-best plugins

So I list the actively-maintained-and-high-quality plugins to help newbies start:
| Name                | Description                             | Alternatives     |
|---------------------+-----------------------------------------+------------------|
| [[http://www.emacswiki.org/emacs/Evil][Evil]]                | convert Emacs into vim                  | none             |
| [[http://orgmode.org][Org]]                 | [[http://en.wikipedia.org/wiki/Getting_Things_Done][Get Things Done (GTD)]]                   | none             |
| [[https://github.com/company-mode/company-mode][company-mode]]        | code completion                         | auto-complete    |
| [[https://github.com/magnars/expand-region.el][expand-region]]       | selection region efficiently            | none             |
| [[https://github.com/nonsequitur/smex][smex]]                | Input command efficiently               | none             |
| [[https://github.com/capitaomorte/yasnippet][yasnippet]]           | text template                           | none             |
| [[http://www.emacswiki.org/emacs/FlyMake][flymake]]             | syntax check.                           | flycheck         |
| [[https://github.com/emacs-helm/helm][helm]]                | a framework to choose candidates        | ido              |
| [[http://www.emacswiki.org/emacs/InteractivelyDoThings][ido]]                 | similar to helm                         | helm             |
| [[https://github.com/mooz/js2-mode][js2-mode]]            | everything for javascript               | js-mode          |
| [[http://www.emacswiki.org/emacs/emacs-w3m][w3m]]                 | web browser                             | Eww              |
| [[https://github.com/skeeto/emacs-web-server][simple-httpd]]        | web server                              | [[https://github.com/nicferrier/elnode][elnode]]           |
| [[https://github.com/Fuco1/smartparens][smartparens]]         | auto insert matched parens              | autopair         |
| [[https://github.com/nschum/window-numbering.el][window-numbering.el]] | jump focus between sub-windows          | switch-window.el |
| [[https://github.com/fxbois/web-mode][web-mode]]            | everything for edit HTML templates      | nxml-mode        |
| [[https://github.com/magit/magit][magit]]               | Everything about git                    | None             |
| [[https://github.com/syohex/emacs-git-gutter][git-gutter.el]]       | Mark the VCS (git, subversion ...) diff | None             |

If some plugin is not included in above list and you are not sure about its quality, please go to [[http://melpa.org][MELPA's website]] to check its number of downloads.
** Emacs is a way of life
Emacs people are basically people who are hacking Lisp code for fun. They get the job done in a creative way. For example, [[http://sachachua.com/blog/][Sacha Chua]] mentioned that [[http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/][she let Emacs read the manual when cooking]].

So *what benefit* can I get after knowing the Emacs way?

After mastering Emacs, I could not endure the default key bindings of Firefox. So I installed an addon [[https://github.com/mooz/keysnail/wiki][Keysnail]] to convert Firefox into Emacs. That doubled my speed in browser navigation. As a web developer, I am doing the browser navigation thing everyday.

Then I realized that Keysnail was awesome because [[https://github.com/mooz][its developer mooz]] was awesome. I followed him and used whatever he used. His [[https://github.com/mooz/percol][percol]] made all my operations (git, [[http://blog.binchen.org/posts/how-to-do-the-file-navigation-efficiently.html][file navigation]], database management ...) under shell ten times faster.

Things that used to be important become trivial now. For example, I don't care which text editor has better file explorer. Why should I use any file explorer if I am *ten times faster* in shell?

We are living in the world of science and engineering. I improve myself *more quickly* by sharing to the best, by learning from the best. Knowledge is not black magic. Hiding knowledge will *make it stale*.

** Take action
All roads lead to Rome. It doesn't matter which road you choose. What matters is walking on the road right now. 

But please make sure you *actually* understand the key points of this article at first.

For example, do you realize that previous sections imply following actions:
- Find all the developers of the Emacs plugins I listed
- Follow them on Quora/Twitter/Github/Reddit/Google+
- Read all their old posts on Quora/Reddit/Google+
** FAQ
*** I'm Emacs dummy. How to start?
Go to [[https://github.com/redguardtoo/emacs.d]] and check the section "Install stable version in easiest way" in [[https://github.com/redguardtoo/emacs.d/blob/master/README.org][README]].

Then follow the steps at [[https://github.com/redguardtoo/emacs.d/blob/master/BETA.org]].
*** Any documentation on Steve Purcell's setup?
Nope. Read its README and code comment. The header of the code file usually has some guide and the developer's email.
*** Is Master's setup too heavy weight?
No. It is lightweight actually. Masters know how to optimize their Elisp code.

For example, they use a technique called [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html][Autoload]]. It will load a module when and only when module is actually used. I'm 100% sure all the setup I mentioned has applied this technique.

*** Any other setup you can recommend *except* Purcell's?
I did [[https://github.com/search?l=Emacs+Lisp&o=desc&q=emacs&ref=searchresults&s=stars&type=Repositories][search at github]], here is the list of top ones:
- [[https://github.com/bbatsov/prelude][Bozhidar Batsov's emacs.d]]
- [[https://github.com/syl20bnr/spacemacs][Sylvain Benner's spacemacs]] (Spacemacs focus on [[http://www.emacswiki.org/emacs/Evil][Evil]], so it might not be good for non-vim users)
- [[https://github.com/eschulte/emacs24-starter-kit/][Eric Schulte's Emacs Starter Kit]].
*** Which version I should use?
v24.3.1 is the latest stable version, it has been released for more than one year without any big issue. It can be installed easily on any platform.

I've watched too many people failed because they started from un-stable version!

Though v24.4 is released, it has some compatibility issues with third party plugins. I suggest you wait at least half a year before switching to the new version.
*** As a Vi person, why should I turn to Emacs?
[[http://www.emacswiki.org/emacs/Evil][Evil]], the best of the best! 

*** Why some Vim users cannot accept Evil?
It's because their customized key bindings conflict with Emacs/Evil default key bindings.

The solution is to use [[http://stackoverflow.com/questions/1764263/what-is-the-leader-in-a-vimrc][Leader Key]] in both Emacs and Vim.

Please note in Emacs you need install a [[https://github.com/cofi/evil-leader][third party plugin]] for this solution.

The other solution is to stay inside the comfort zone of vim.

That's totally fine if you are OK with the life without Org-mode and Lisp. ;)

Or maybe you can read the section "What matters is attitude"?

I am die-hard Vi user with 14 year experience. After realizing the potential of Evil and Leader key, I *re-assign all my vim key bindings* according to Emacs configuration.

Another more brilliant example is [[https://github.com/syl20bnr/spacemacs][a guy who earning tons of Github stars]].
*** I don't like default key bindings
[[http://ergoemacs.org/][ergoemacs]] if you prefer Microsoft's key bindings.
*** Too many key bindings to memorise
Use [[http://www.emacswiki.org/Smex][Smex]]. It's a myth that a Emacs guru must remember many key bindings.
*** I am not comfortable with other people's setup. Can I modify it?
Try to understand the master's setup at first. Don't make judgment too early. It's easy to make judgment. But understanding needs wisdom and hard work.

For example, some people reported that there was some weird character at column 80 when editing a file. That's actually a feature to remind the user not to create any line with width more than 80 columns. [[http://www.emacswiki.org/emacs/EightyColumnRule][Here is the reason]].

*** I've cloned the master's setup but the package is not upgraded.
Remove the file .emacs in your HOME directory. The ~/.emacs.d/init.el has same functionality.
*** I have some specific question about Emacs
Please,
- read official tutorial
- google

For example, google "emacswiki init.el" to understand what's the init.el.
*** I got some error message when starting Emacs with master's setup
That message could be ignored. It's just the *warning* message when Emacs can't find some OPTIONAL command line tool.

If you need install that missing tool, search the list in [[https://github.com/redguardtoo/emacs.d][my readme]].

If you are sure it's actually an *error* message, 
- Run "emacs -nw --debug-init" in terminal
- Send the output to the author of the setup
- Please use bug tracker if possible

*** My own setup is more controllable
That's what I thought at the beginning. After several months I realized that I could never be as good as a master like Steve Purcell if keeping this way.

While I spend serveral weeks to overcome some minor issues in Emacs setup, Purcell has already installed/developed dozens of cool plugins.

If I cannot win, the only strategy is to join him, that's why I clone his setup and start to report bug for him. Here is [[https://github.com/purcell/emacs.d/issues/6][first issue I reported]]. Besides, reporting bugs also gives me the opportunity to talk with the master.

So don't run away from the master's huge setup. Regard it as a challenge to improve yourself.
*** Why I cannot add my own plugins into master's setup
Though the quality of Emacs plugins are generally good, they may have compatibility issues. It's usually because plugins are developed by different people. For example, both [[https://github.com/auto-complete][auto-complete]] and [[https://github.com/capitaomorte/yasnippet][yasnippet]] will use TAB key to expand code. So there is confict if I use both plugins.

That's another reason to stick to the master's setup at the beginning.
*** How to use Emacs on windows
Install Cygwin!

When you have enough knowledge about environment variables and pipe. You can check [[http://stackoverflow.com/questions/3286723/emacs-cygwin-setup-under-windows/13245173#13245173][My answer at stackoverflow]] to use native windows version.

At minimum, you need set the environment variables HOME and PATH if you prefer non-cygwin way.

*** What about code-navigation and code-completion?
Thanks to [[http://clang.llvm.org/][Clang]] && [[http://www.gnu.org/software/global/][GNU Global]], C++ is perfect now. Support for other languages are also good enough except Java and C#.

I suggesting you using IDE when dealing with Java and C# in big projects.
*** What about web browsing?
I strongly recommend Firefox plus [[https://github.com/mooz/keysnail/][Keysnail]].

This is the perfect solution for Emacs fans. Trust me, I've already investigated *every* solution.

*** Email?
I use [[http://www.gnus.org/][Gnus]]. But there are many alternatives. If you have to fetch email from Microsoft Exchange Servers, you need [[http://davmail.sourceforge.net/][Davmail]].

I also use [[http://getpopfile.org/][Popfile]] to sort emails. Davmail+Popfile is the best solution!

*** Why Emacs cannot download packages?
If you are living in North Korea, Iran or China, you need below command line to start Emacs:
#+BEGIN_SRC elisp
http_proxy=your-proxy-server-ip:port emacs -nw
#+END_SRC

How to configure proxy server is not covered here.
*** As a greenhorn of Emacs, should I learn Emacs Lisp at first?
NO.

Most people lose the interest in Lisp because there its strange syntax and there not many Lisp jobs.

That's why I stress that you need avoid tweaking Emacs at the beginning. Please copy the master's setup at first.

Unless you have seen how Lisp gets your job done, you will not have the *enough stimulus* to finish the its course.

Me, for example, never feel pressued to learning Lisp. Actually, my initial plan is being great *without* touching Lisp.

As a *proof*, please visit [[https://github.com/redguardtoo/][my github account]]. Check all the issues I reported at the beginning. As you can see, I know little about Emacs Lisp for a very long time.

*** After knowing the basics, what to do next?
Find your practical problem which only Emacs can do best. Trust me, Emacs is much more powerful than your wildest imagination.

Here is my example:
- When I use Wordpress blog, I use [[https://github.com/punchagan/org2blog][org2blog]] to post articles. It's ten times faster than any other client.
- I installed cmake-mode to do the cross-platform development with [[http://www.cmake.org/Wiki/CMake/Editors/Emacs][cmake]].
- window-numbering.el is useful when jumping focus between sub-windows.
- When I work for some huge projects, I use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to comment code lines because I need deal with too many programming languages. 

*** Do I need learn keyboard macros?
No. Emacs Lisp is enough. 

But, studying the Lisp code created by macro does help to understand some interesting problems. So I suggest you learn keyboard macro *after* mastering Lisp.
*** What do you think "Emacs can do everything"?
I suggest being practical. Sometimes other tools are simply better in real world.

For example, a developer had difficulties to sort a big dictionary file with *pure* Emacs Lisp. It's too slow.

After consulting with me, he found that the [[https://github.com/tumashu/chinese-pyim/commit/90519d3f][GNU Sort is much better]] in this case.

So be practical. [[http://en.wikipedia.org/wiki/Richard_Stallman][Richard Stallman]] created a whole GNU echosystem for you. Emacs is only one component. Why not take full advantage of the system?
** Contact me
Here is my [[https://twitter.com/#!/chen_bin][twitter]] and [[https://plus.google.com/110954683162859211810][google+]].

My blog is at [[http://blog.binchen.org]].

Please don't ask basic questions, since I've already shown you how to find the answer.
** Summary
- Start from real world problem
- Follow the master
- Report bugs to the master you follow
- Read and practice while following master

This article is published at [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide]].

Please use github's bug tracker instead of emailing me directly. Github notification mail is always in my first priority folder.

Emacs is actually a platform. Cool people keep appearing. I will update this article from time to time in the future.
